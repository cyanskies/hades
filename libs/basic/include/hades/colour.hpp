#ifndef HADES_COLOUR_HPP
#define HADES_COLOUR_HPP

#include <array>
#include <cassert>
#include <limits>
#include <string_view>

#include "hades/string.hpp"
#include "hades/types.hpp"
#include "hades/vector_math.hpp"

//https://www.color-hex.com/ has shade tables for hex colours

namespace hades
{
	struct colour
	{
		using value_type = uint8;

		constexpr value_type& operator[](std::size_t i) noexcept
		{
			constexpr auto arr = std::array{ &colour::r, &colour::g, &colour::b, &colour::a };
			assert(i < size(arr));
			return std::invoke(arr[i], this);
		}

		constexpr const value_type& operator[](std::size_t i) const noexcept
		{
			constexpr auto arr = std::array{ &colour::r, &colour::g, &colour::b, &colour::a };
			assert(i < size(arr));
			return std::invoke(arr[i], this);
		}

		constexpr vector4<float> to_vec4() const noexcept
		{
			return vector4<float>{
				float_cast(r),
				float_cast(g),
				float_cast(b),
				float_cast(a)
			};		
		}

		value_type r = 0;
		value_type g = 0;
		value_type b = 0;
		value_type a = 255;
	};

	constexpr bool operator==(colour l, colour r) noexcept
	{
		return std::tie(l[0], l[1], l[2], l[3]) == std::tie(r[0], r[1], r[2], r[3]);
	}

	constexpr bool operator!=(colour l, colour r) noexcept
	{
		return !(l == r);
	}

	constexpr bool operator<(colour l, colour r) noexcept
	{
		return std::tie(l[0], l[1], l[2], l[3]) < std::tie(r[0], r[1], r[2], r[3]);
	}

	template<>
	colour from_string<colour>(std::string_view);
	string to_string(colour);

	namespace colours
	{
		// x11 colour names
		// colour names as string match these with '_' replace with '-'
		enum class names {
			snow,
			ghost_white,
			white_smoke,
			gainsboro,
			floral_white,
			old_lace,
			linen,
			antique_white,
			papaya_whip,
			blanched_almond,
			bisque,
			peach_puff,
			navajo_white,
			moccasin,
			cornsilk,
			ivory,
			lemon_chiffon,
			seashell,
			honeydew,
			mint_cream,
			azure,
			alice_blue,
			lavender,
			lavender_blush,
			misty_rose,
			white,
			black,
			dark_slate_gray,
			dark_slate_grey,
			dim_gray,
			dim_grey,
			slate_gray,
			slate_grey,
			light_slate_gray,
			light_slate_grey,
			gray,
			grey,
			light_grey,
			light_gray,
			midnight_blue,
			navy,
			navy_blue,
			cornflower_blue,
			dark_slate_blue,
			slate_blue,
			medium_slate_blue,
			light_slate_blue,
			medium_blue,
			royal_blue,
			blue,
			dodger_blue,
			deep_sky_blue,
			sky_blue,
			light_sky_blue,
			steel_blue,
			light_steel_blue,
			light_blue,
			powder_blue,
			pale_turquoise,
			dark_turquoise,
			medium_turquoise,
			turquoise,
			cyan,
			light_cyan,
			cadet_blue,
			medium_aquamarine,
			aquamarine,
			dark_green,
			dark_olive_green,
			dark_sea_green,
			sea_green,
			medium_sea_green,
			light_sea_green,
			pale_green,
			spring_green,
			lawn_green,
			green,
			chartreuse,
			medium_spring_green,
			green_yellow,
			lime_green,
			yellow_green,
			forest_green,
			olive_drab,
			dark_khaki,
			khaki,
			pale_goldenrod,
			light_goldenrod_yellow,
			light_yellow,
			yellow,
			gold,
			light_goldenrod,
			goldenrod,
			dark_goldenrod,
			rosy_brown,
			indian_red,
			saddle_brown,
			sienna,
			peru,
			burlywood,
			beige,
			wheat,
			sandy_brown,
			tan,
			chocolate,
			firebrick,
			brown,
			dark_salmon,
			salmon,
			light_salmon,
			orange,
			dark_orange,
			coral,
			light_coral,
			tomato,
			orange_red,
			red,
			hot_pink,
			deep_pink,
			pink,
			light_pink,
			pale_violet_red,
			maroon,
			medium_violet_red,
			violet_red,
			magenta,
			violet,
			plum,
			orchid,
			medium_orchid,
			dark_orchid,
			dark_violet,
			blue_violet,
			purple,
			medium_purple,
			thistle,
			snow1,
			snow2,
			snow3,
			snow4,
			seashell1,
			seashell2,
			seashell3,
			seashell4,
			bisque1,
			bisque2,
			bisque3,
			bisque4,
			cornsilk1,
			cornsilk2,
			cornsilk3,
			cornsilk4,
			ivory1,
			ivory2,
			ivory3,
			ivory4,
			honeydew1,
			honeydew2,
			honeydew3,
			honeydew4,
			azure1,
			azure2,
			azure3,
			azure4,
			blue1,
			blue2,
			blue3,
			blue4,
			turquoise1,
			turquoise2,
			turquoise3,
			turquoise4,
			cyan1,
			cyan2,
			cyan3,
			cyan4,
			aquamarine1,
			aquamarine2,
			aquamarine3,
			aquamarine4,
			green1,
			green2,
			green3,
			green4,
			chartreuse1,
			chartreuse2,
			chartreuse3,
			chartreuse4,
			khaki1,
			khaki2,
			khaki3,
			khaki4,
			yellow1,
			yellow2,
			yellow3,
			yellow4,
			gold1,
			gold2,
			gold3,
			gold4,
			goldenrod1,
			goldenrod2,
			goldenrod3,
			goldenrod4,
			sienna1,
			sienna2,
			sienna3,
			sienna4,
			burlywood1,
			burlywood2,
			burlywood3,
			burlywood4,
			wheat1,
			wheat2,
			wheat3,
			wheat4,
			tan1,
			tan2,
			tan3,
			tan4,
			chocolate1,
			chocolate2,
			chocolate3,
			chocolate4,
			firebrick1,
			firebrick2,
			firebrick3,
			firebrick4,
			brown1,
			brown2,
			brown3,
			brown4,
			salmon1,
			salmon2,
			salmon3,
			salmon4,
			orange1,
			orange2,
			orange3,
			orange4,
			coral1,
			coral2,
			coral3,
			coral4,
			tomato1,
			tomato2,
			tomato3,
			tomato4,
			red1,
			red2,
			red3,
			red4,
			pink1,
			pink2,
			pink3,
			pink4,
			maroon1,
			maroon2,
			maroon3,
			maroon4,
			magenta1,
			magenta2,
			magenta3,
			magenta4,
			orchid1,
			orchid2,
			orchid3,
			orchid4,
			plum1,
			plum2,
			plum3,
			plum4,
			purple1,
			purple2,
			purple3,
			purple4,
			thistle1,
			thistle2,
			thistle3,
			thistle4,
			gray0,
			grey0,
			gray1,
			grey1,
			gray2,
			grey2,
			gray3,
			grey3,
			gray4,
			grey4,
			gray5,
			grey5,
			gray6,
			grey6,
			gray7,
			grey7,
			gray8,
			grey8,
			gray9,
			grey9,
			gray10,
			grey10,
			gray11,
			grey11,
			gray12,
			grey12,
			gray13,
			grey13,
			gray14,
			grey14,
			gray15,
			grey15,
			gray16,
			grey16,
			gray17,
			grey17,
			gray18,
			grey18,
			gray19,
			grey19,
			gray20,
			grey20,
			gray21,
			grey21,
			gray22,
			grey22,
			gray23,
			grey23,
			gray24,
			grey24,
			gray25,
			grey25,
			gray26,
			grey26,
			gray27,
			grey27,
			gray28,
			grey28,
			gray29,
			grey29,
			gray30,
			grey30,
			gray31,
			grey31,
			gray32,
			grey32,
			gray33,
			grey33,
			gray34,
			grey34,
			gray35,
			grey35,
			gray36,
			grey36,
			gray37,
			grey37,
			gray38,
			grey38,
			gray39,
			grey39,
			gray40,
			grey40,
			gray41,
			grey41,
			gray42,
			grey42,
			gray43,
			grey43,
			gray44,
			grey44,
			gray45,
			grey45,
			gray46,
			grey46,
			gray47,
			grey47,
			gray48,
			grey48,
			gray49,
			grey49,
			gray50,
			grey50,
			gray51,
			grey51,
			gray52,
			grey52,
			gray53,
			grey53,
			gray54,
			grey54,
			gray55,
			grey55,
			gray56,
			grey56,
			gray57,
			grey57,
			gray58,
			grey58,
			gray59,
			grey59,
			gray60,
			grey60,
			gray61,
			grey61,
			gray62,
			grey62,
			gray63,
			grey63,
			gray64,
			grey64,
			gray65,
			grey65,
			gray66,
			grey66,
			gray67,
			grey67,
			gray68,
			grey68,
			gray69,
			grey69,
			gray70,
			grey70,
			gray71,
			grey71,
			gray72,
			grey72,
			gray73,
			grey73,
			gray74,
			grey74,
			gray75,
			grey75,
			gray76,
			grey76,
			gray77,
			grey77,
			gray78,
			grey78,
			gray79,
			grey79,
			gray80,
			grey80,
			gray81,
			grey81,
			gray82,
			grey82,
			gray83,
			grey83,
			gray84,
			grey84,
			gray85,
			grey85,
			gray86,
			grey86,
			gray87,
			grey87,
			gray88,
			grey88,
			gray89,
			grey89,
			gray90,
			grey90,
			gray91,
			grey91,
			gray92,
			grey92,
			gray93,
			grey93,
			gray94,
			grey94,
			gray95,
			grey95,
			gray96,
			grey96,
			gray97,
			grey97,
			gray98,
			grey98,
			gray99,
			grey99,
			gray100,
			grey100,
			end
		};

		// create tables for https://en.wikipedia.org/wiki/Web_colors colour groups
		constexpr auto transparent = colour{ 0, 0, 0, 0 };

		// retrieve colour from name without string comparison
		names to_name(colour) noexcept;
		colour from_name(names);
		std::string_view to_string(names);
		// returns names::end on failure
		names name_from_string(std::string_view) noexcept;
	}
}

#endif //!HADES_COLOUR_HPP
